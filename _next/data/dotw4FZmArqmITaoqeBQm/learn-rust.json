{"pageProps":{"projectTitle":"pub.docs","meta":{"title":"Rustを学ぼう","date":"2022-02-03T21:50:49+09:00","draft":false},"list":"<ul>\n<li><a href=\"/learn-rust/\">Rustを学ぼう</a></li>\n</ul>\n","content":"<h1 id=\"rust%E3%82%92%E5%AD%A6%E3%81%BC%E3%81%86\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rust%E3%82%92%E5%AD%A6%E3%81%BC%E3%81%86\">#</a> Rustを学ぼう</h1>\n<p>この資料は、 <a href=\"https://doc.rust-lang.org/book/\">The Rust Programming Language</a> (TRPL) を参考に、Rustはいいぞ！ということを伝えるために作った資料です。TRPLの1~3章に相当するので、本資料を読んだ後にTRPLの該当部分を読んでみるとスラスラ読めると思います。</p>\n<h2 id=\"%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\">#</a> はじめに</h2>\n<p>初めてのプログラミング言語を学ぶときには、「その言語の良さが分からないと学ぶモチベーションが上がらない」でも、「言語の良さをきちんと知るにはその言語を少しは触る必要がある」というジレンマがあります。</p>\n<p>そこで今回は、<code>if</code>や<code>for</code>などの基本的な部分+所有権というRustの特徴的な部分をざっと紹介した後で、Rustのよさである「安全性」「実行速度」「開発体験」をそれぞれ手を動かしながら体験してもらうという構成にしました。</p>\n<p>つまり、先に簡単にRustの勉強をした後で、Rustの良さを知る、という流れです。</p>\n<p>それでは始めていきましょう。</p>\n<h2 id=\"%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%8B%E3%82%89rust%E3%82%92%E6%B0%97%E8%BB%BD%E3%81%AB%E8%A9%A6%E3%81%99\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%8B%E3%82%89rust%E3%82%92%E6%B0%97%E8%BB%BD%E3%81%AB%E8%A9%A6%E3%81%99\">#</a> ブラウザからRustを気軽に試す</h2>\n<p>Rustをインストールするのはとても簡単ですが、まずは気軽に試すためにブラウザだけで簡単なコードが試せる <a href=\"https://play.rust-lang.org/\">Rust Playground</a> を使ってみましょう。このPlaygroundはブラウザで入力したコードを裏でサーバに投げてコンパイルして実行して結果を返してくれるものです。</p>\n<p>初めて使う方は以下のようなコードが表示されていると思います。この部分は自由に編集することができます。</p>\n<pre><code class=\"language-rust\">fn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre>\n<p>これがRustのハローワールドです。main関数内に、標準出力を行うマクロ <code>println!</code> がありますね。マクロとは、他のコードを記述するためのコードを書く手段です。どのように他のコードを記述しているのかは <a href=\"https://doc.rust-lang.org/std/macro.println.html\"><code>println!</code> のドキュメント</a> から、<code>Macro std::println</code> の右側にある <a href=\"https://doc.rust-lang.org/src/std/macros.rs.html#94-99\"><code>src</code></a> 部分を見てみると良いでしょう。</p>\n<p>しかし現段階での理解は難しいと思うので、今は、関数は <code>!</code> なしで <code>func_name()</code> のように呼び出され、マクロは <code>!</code> ありで <code>macro_name!()</code> のように呼び出されるということを覚えていれば大丈夫です。</p>\n<p>それではこのコードを実行してみましょう。左上の「<code>RUN</code>」ボタンを押してみてください。画面下半分のところに「<code>Progress</code>」で黒丸が表示され、少し時間が経つと「<code>Standard Error</code>」, 「<code>Standard Output</code>」部分に表示がされていると思います。「<code>Standard Error</code>」が標準エラー出力、「<code>Standard Output</code>」が標準出力です。</p>\n<p>また、「<code>SHARE</code>」から「<code>Permalink to the playground</code>」をクリックすると、 <a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=7c4f223819334660c7915edb9830a15e\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=7c4f223819334660c7915edb9830a15e</a> のように書いたコードへのリンクが得られます。</p>\n<p>使い方はこれで以上です。それでは、どの言語にも共通する<code>if</code>や<code>for</code>のような基本的な事柄をPlayground上で学んでみましょう。</p>\n<p><strong>確認テスト</strong></p>\n<ul>\n<li>[ ] Rust Playgroundの使い方(コードの書き方、実行の仕方、リンクの保存の仕方)を理解した</li>\n<li>[ ] 関数とマクロの違いをなんとなく理解した</li>\n</ul>\n<h2 id=\"%E3%81%93%E3%81%AE%E5%BE%8C%E3%81%AE%E9%80%B2%E3%82%81%E6%96%B9\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E3%81%93%E3%81%AE%E5%BE%8C%E3%81%AE%E9%80%B2%E3%82%81%E6%96%B9\">#</a> この後の進め方</h2>\n<p>この後はRustの基本的な部分と、所有権というRustの特徴的な部分を学びます。</p>\n<p>基本的にはRust Playgroundのリンクを開き、実行し、説明文を読み、演習に答える、という流れです。演習では参考リンクを貼っているので、それを見てチャレンジすると良いと思います。</p>\n<p>それではやっていきましょう！</p>\n<h2 id=\"%E5%A4%89%E6%95%B0\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%A4%89%E6%95%B0\">#</a> 変数</h2>\n<p><a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=473312ffaf20421980b8dd174b4a59ef\">こちらのPlaygroundへのリンク</a> を開いて実行してください。</p>\n<p>以下のようなエラーが出たと思います。</p>\n<pre><code class=\"language-none\">   Compiling playground v0.0.1 (/playground)\nerror[E0384]: cannot assign twice to immutable variable `x`\n --&gt; src/main.rs:4:5\n  |\n2 |     let x = 10;\n  |         -\n  |         |\n  |         first assignment to `x`\n  |         help: consider making this binding mutable: `mut x`\n3 |     println!(\"x = {}\", x);\n4 |     x = 1000;\n  |     ^^^^^^^^ cannot assign twice to immutable variable\n\nFor more information about this error, try `rustc --explain E0384`.\nerror: could not compile `playground` due to previous error\n</code></pre>\n<p>Rustは実行バイナリにコンパイルして実行する言語です。このエラーは、コンパイルできないよ！というエラーです。</p>\n<p>エラー文を読んでみると、「cannot assign twice to immutable variable」(immutableな変数に2回代入はできない)とありますね。immutableは「不変」という意味です。Rustでは、変数はデフォルトで不変になっていて、再代入ができなくなっています。</p>\n<p>代入したい場合は、エラーメッセージの「help: consider making this binding mutable: <code>mut x</code>」にあるように、<code>mut</code>キーワードを使います。</p>\n<p><strong>演習</strong></p>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=35bb2c56c87d81d52d4a071d49add48a\">問題へのリンク</a> を開いて、コンパイルが通るように「ここを書き換えよ」というコメントのある行を書き換えよ。\n<ul>\n<li>参考: <a href=\"https://doc.rust-jp.rs/book-ja/ch03-01-variables-and-mutability.html\">TRPL: 変数と可変性</a></li>\n<li><a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=a6ff551ed8151ceb8a36784cc2dc39b9\">解答へのリンクはこちら</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B\">#</a> データ型</h2>\n<p>静的型付き言語であるRustでは、値には型がついています。データ型の中にある「スカラー型」と「複合型」を学びましょう。</p>\n<ul>\n<li>スカラー型: 整数、浮動小数点数、論理値、文字</li>\n<li>複合型: タプル型、配列</li>\n</ul>\n<p>となっています。</p>\n<p><strong>演習</strong></p>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=5eff8a75ba17095a08c0dcbb9920b3eb\">リンク</a> を開いて、それぞれのデータ型を確認しましょう。\n<ul>\n<li>参考: <a href=\"https://doc.rust-jp.rs/book-ja/ch03-02-data-types.html\">TRPL: データ型</a></li>\n<li>参考: <a href=\"https://doc.rust-lang.org/reference/types.html\">The Rust Reference: Types</a></li>\n</ul>\n</li>\n<li><a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=5abae3a2b959cfbcb2b604b061dc6e50\">問題へのリンク</a> を開いて、コンパイルが通るかどうか予想してみましょう。\n<ul>\n<li>なぜ <code>mut</code> をつけていないのにコンパイルが通るのでしょうか？</li>\n<li>参考: <a href=\"https://doc.rust-jp.rs/rust-by-example-ja/variable_bindings/scope.html\">スコープとシャドーイング</a></li>\n<li><a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=4d3643102387a5360ebe8c0a9a47cffd\">解答へのリンクはこちら</a></li>\n</ul>\n</li>\n<li><a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=4ae72baee96801dcbbc44c195719d504\">問題へのリンク</a> を開いて、コンパイルが通るように「ここを書き換えよ」というコメントのある行を書き換えよ。\n<ul>\n<li>なぜコンパイルが通らないのでしょうか？理由を考えてみましょう。</li>\n<li>参考: <a href=\"https://doc.rust-jp.rs/rust-by-example-ja/types/cast.html\">Rust By Example: 型キャスティング</a></li>\n<li>参考: <a href=\"https://doc.rust-lang.org/std/keyword.as.html\">keyword <code>as</code></a></li>\n<li><a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=2512e68e8c35da8d12c952006741c41a\">解答へのリンクはこちら</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"%E9%96%A2%E6%95%B0\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E9%96%A2%E6%95%B0\">#</a> 関数</h2>\n<p>関数は以下のように書きます。関数は値を受け取って処理を行うものなので、引数と返り値に注目すると分かりやすいと思います。</p>\n<pre><code class=\"language-rust\">// 関数\nfn function_1() {\n    println!(\"Number = {}\", 123);\n}\n\n// 引数のある関数\nfn function_2(x: i32) {\n    println!(\"Number = {}\", x);\n}\n\n// 返り値のある関数\nfn function_3(x: i32) -&gt; i32 {\n    x + 1\n}\n</code></pre>\n<p>引数はカッコの中に、 <code>func_name(x: Ty)</code> のように変数 <code>x</code> の型 <code>Ty</code> をコロン <code>:</code> を間に挟んで書きます。</p>\n<p>返り値は、<code>func_name() -&gt; Ty</code> のように返り値の型 <code>Ty</code> を <code>-&gt;</code> の後ろに書きます。</p>\n<p><strong>演習</strong></p>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=0d0e85e7fcad3de7baebceb9bf4dcd89\">問題へのリンク</a> を開いて、コンパイルが通るように関数を書き加えてみましょう。\n<ul>\n<li>上の <code>function_3</code> を真似してみましょう。</li>\n<li>参考: <a href=\"https://doc.rust-jp.rs/book-ja/ch03-03-how-functions-work.html\">TRPL: 関数</a></li>\n<li><a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=0b0119736025db8697b879ef775f64ed\">解答へのリンクはこちら</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88\">#</a> コメント</h2>\n<p>コメントは <code>// (comment)</code> や <code>/* (comment) */</code> と書くことができます。</p>\n<pre><code class=\"language-rust\">// hello, world 一行のコメント\n\n/* ok\nThis is comment\n複数行書けるコメント\n */\n</code></pre>\n<h2 id=\"%E3%83%95%E3%83%AD%E3%83%BC%E5%88%B6%E5%BE%A1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E3%83%95%E3%83%AD%E3%83%BC%E5%88%B6%E5%BE%A1\">#</a> フロー制御</h2>\n<p>ここでは、 <code>if</code> 式とループを学びます。</p>\n<p><code>if</code> 式は、論理値を用いて条件分岐するときに使います。</p>\n<pre><code class=\"language-rust\">let x = 5;\n\n// 論理値を入れる\nif x != 0 {\n    println!(\"x is not 0.\");\n}\n\n// elseを使って2つに分岐\nif x != 0 {\n    println!(\"x is not 0.\");\n} else {\n    println!(\"x is 0.\");\n}\n\n// else if を使って複数に分岐\nif x &gt; 0 {\n    println!(\"x is +.\");\n} else if x &lt; 0 {\n    println!(\"x is -.\");\n} else {\n    println!(\"x is 0.\");\n}\n\n// ifは式なので、値を返却できる\nlet y = if x &gt; 0 {\n    10 // 値を返却するために `;` がつかないことに注意\n} else {\n    -10 // let variable = if cond { A } else { B }; の時、AとBは同じ型\n};\n</code></pre>\n<p>ループは、<code>loop</code>, <code>while</code>, <code>for</code> の3つが使えます。</p>\n<pre><code class=\"language-rust\">// loop: プログラムをCtrl+cで止めるまで永遠にループする\nloop {\n    println!(\"Hello!\");\n}\n\n// while: 条件式が`true`の間だけループする\nlet mut x = 5;\nwhile x &gt; 0 {\n    println!(\"{}\", x);\n    x = x - 1;\n}\n\n// for: 決められた固定回数だけループする。添字を使うループとして、配列を対象によく使われる\nfor i in 0..10 {\n    println!(\"{}\", i);\n}\n</code></pre>\n<p><code>if</code> も <code>for</code> も、条件式やループの添字部分を <code>()</code> で囲うことがないのが特徴的ですね。</p>\n<p><strong>演習</strong></p>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=3ccb9bc8405d3d98ee1725f56589bea7\">問題へのリンク</a> を開いて、コンパイルが通るように「ここを書き換えよ」というコメントのある行を書き換えよ。\n<ul>\n<li>なぜコンパイルが通らないのでしょうか？</li>\n<li>参考: <a href=\"https://doc.rust-jp.rs/book-ja/ch03-05-control-flow.html\">TRPL: フロー制御</a></li>\n<li><a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=5fa34d7023b8607beac73d32430d16a3\">解答へのリンクはこちら</a></li>\n</ul>\n</li>\n<li><a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=5c1f1ecf8fbbc73ea9d62adc8635c52b\">リンク</a> を見て、for文の使い方を学びましょう。\n<ul>\n<li>参考: <a href=\"https://doc.rust-jp.rs/rust-by-example-ja/flow_control/for.html\">Rust By Example: forループ</a></li>\n<li>参考: <a href=\"https://doc.rust-lang.org/std/keyword.for.html\">keyword <code>for</code></a></li>\n<li>参考: <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.rev\"><code>rev()</code></a></li>\n<li>参考: <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.iter\"><code>iter()</code></a></li>\n<li>Rustにはたくさんの便利なメソッドがあるので、やりたいことがあれば標準ライブラリのドキュメントを検索してみると良いでしょう。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"%E6%89%80%E6%9C%89%E6%A8%A9\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%89%80%E6%9C%89%E6%A8%A9\">#</a> 所有権</h2>\n<p>Rustには所有権という概念があります。これは The Rust Programming Language を読んでもらった方が遥かに分かりやすいと思うので、以下を読みましょう。</p>\n<ul>\n<li><a href=\"https://doc.rust-jp.rs/book-ja/ch04-00-understanding-ownership.html\">4.所有権を理解する</a></li>\n<li><a href=\"https://doc.rust-jp.rs/book-ja/ch04-01-what-is-ownership.html\">4.1.所有権とは？</a></li>\n<li><a href=\"https://doc.rust-jp.rs/book-ja/ch04-02-references-and-borrowing.html\">4.2.参照と借用</a></li>\n<li><a href=\"https://doc.rust-jp.rs/book-ja/ch04-03-slices.html\">4.3.スライス型</a></li>\n</ul>\n<h2 id=\"%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\">#</a> 終わりに</h2>\n<p>TRPLは素晴らしい資料なので、本資料も工夫したかったのですが難しかったです。この資料を読んで、TRPL読んでみようかな、と思ってもらえたら嬉しいです。</p>\n","toc":"<nav class=\"table-of-contents\"><ol><li><a href=\"#rust%E3%82%92%E5%AD%A6%E3%81%BC%E3%81%86\"> Rustを学ぼう</a><ol><li><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"> はじめに</a></li><li><a href=\"#%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%8B%E3%82%89rust%E3%82%92%E6%B0%97%E8%BB%BD%E3%81%AB%E8%A9%A6%E3%81%99\"> ブラウザからRustを気軽に試す</a></li><li><a href=\"#%E3%81%93%E3%81%AE%E5%BE%8C%E3%81%AE%E9%80%B2%E3%82%81%E6%96%B9\"> この後の進め方</a></li><li><a href=\"#%E5%A4%89%E6%95%B0\"> 変数</a></li><li><a href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B\"> データ型</a></li><li><a href=\"#%E9%96%A2%E6%95%B0\"> 関数</a></li><li><a href=\"#%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88\"> コメント</a></li><li><a href=\"#%E3%83%95%E3%83%AD%E3%83%BC%E5%88%B6%E5%BE%A1\"> フロー制御</a></li><li><a href=\"#%E6%89%80%E6%9C%89%E6%A8%A9\"> 所有権</a></li><li><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"> 終わりに</a></li></ol></li></ol></nav>"},"__N_SSG":true}